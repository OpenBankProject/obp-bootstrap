# Generated by Selenium IDE
import logging
from time import sleep

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("obp_bootstrap")
logger.propagate = True
sleeptime = 30

class TestRegisteruserandconsumer():
	def __init__(self):
		chrome_options = Options()
		chrome_options.add_argument("--disable-extensions")
		chrome_options.add_argument("--disable-gpu")
		chrome_options.add_argument("--no-sandbox")  # linux only
		chrome_options.add_argument("--window-size=1920,1080")
		chrome_options.add_argument("--headless")
		try:
			self.driver = webdriver.Chrome(options=chrome_options)
			self.vars = {}
		except Exception as e:
			print("could not create webdriver: " + str(e))
			exit(1)

	def use_firefox(self):
		try:
			self.driver = webdriver.Firefox()
			self.vars = {}
		except Exception as e:
			logger.error(f'could not switch to firefox: {e}')

	def teardown_method(self):
		self.driver.quit()

	def registeruser(self, host, username, password, first_name, last_name, email):
		self.driver.get(host)
		try:
			self.driver.find_element(By.ID, "register-link").click()
			sleep(20)
		except Exception as e:
			logger.exception('Could not click to the key registration button')
		self.driver.find_element(By.ID, "txtFirstName").click()
		self.driver.find_element(By.ID, "txtFirstName").send_keys(first_name)
		self.driver.find_element(By.ID, "txtFirstName").click()
		self.driver.find_element(By.ID, "txtLastName").send_keys(last_name)
		self.driver.find_element(By.ID, "txtEmail").send_keys(email)
		self.driver.find_element(By.ID, "txtUsername").click()
		self.driver.find_element(By.ID, "txtUsername").send_keys(username)
		self.driver.find_element(By.ID, "textPassword").click()
		self.driver.find_element(By.ID, "textPassword").send_keys(password)
		self.driver.find_element(By.ID, "textPasswordRepeat").click()
		self.driver.find_element(By.ID, "textPasswordRepeat").send_keys(password)
		logger.debug('trying to click terms checkbox')
		WebDriverWait(self.driver, int(sleeptime)).until(EC.presence_of_element_located((By.ID, "terms_checkbox")))
		self.driver.find_element(By.ID, "terms_checkbox").click()
		logger.debug('trying to click privacy checkbox')
		self.driver.find_element(By.ID, "privacy_checkbox").click()
		sleep(15)
		try:
			#self.driver.find_element(By.XPATH, "/html/body/div[2]/div[3]/form/div[7]/input").click()
			self.driver.find_element(By.CSS_SELECTOR,'#signup-submit > input:nth-child(1)').click()
		except Exception as e:
			logger.error(f"Could not register User: {e}")
			exit(1)
		sleep(8)
		try:
			WebDriverWait(self.driver, int(sleeptime)).until(EC.presence_of_element_located((By.ID, "get-api-key-link")))
		except Exception as e:
			logger.error(f"no get-api-key-link found in seconds {str(sleeptime)}: {e}")

	def register_consumer(self, host, app_name, email, description, company):
		self.driver.get(f'{host}/consumer-registration')
		try:
			WebDriverWait(self.driver, int(sleeptime)).until(EC.presence_of_element_located((By.ID, "appName")))
		except Exception as e:
			logger.error(f"no appName found in seconds {str(sleeptime)}: {e}")
		self.driver.find_element(By.ID, "appName").click()
		self.driver.find_element(By.ID, "appName").send_keys(app_name)
		self.driver.find_element(By.ID, "appDev").click()
		self.driver.find_element(By.ID, "appDev").send_keys(email)
		self.driver.find_element(By.ID, "appDesc").click()
		self.driver.find_element(By.ID, "appDesc").send_keys(description)
		self.driver.find_element(By.ID, "company").click()
		self.driver.find_element(By.ID, "company").send_keys(company)
		try:
			self.driver.find_element(By.XPATH, "/html/body/div[2]/div[3]/div/div/form/input").click()
		except Exception as e:
			logger.error(f'Could not register api key: {e}')
		sleep(2)
		auth_key = self.driver.find_element(By.XPATH, '//*[@id="auth-key"]').text
		auth_secret = self.driver.find_element(By.XPATH, '//*[@id="secret-key"]').text
		logger.debug(f'created: auth key: {auth_key}, auth secret: {auth_secret}')
		return auth_key, auth_secret

	def login(self, url, username, password):
		self.driver.get(url)
		self.driver.find_element(By.LINK_TEXT, "Log on").click()
		self.driver.find_element(By.ID, "username").send_keys(username)
		self.driver.find_element(By.ID, "password").send_keys(password)
		self.driver.find_element(By.XPATH, "//div[@id=\'authorise-submit\']/input").click()
